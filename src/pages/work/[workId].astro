---
import Layout from "../../layouts/Layout.astro";
import Work from "../../components/home/Work.astro";
import Speacer from "../../components/UIKit/Speacer/Speacer";

type Work = {
  contents: Contents[];
};

type Contents = {
  id: string;
  image: Image;
  image_sp: Image;
  image_sp2: Image;
  title: string;
  href: string;
  use_tech: string;
  comment: string;
  comment_large: string;
};

type Image = {
  url: string;
  width: number;
  height: number;
};

export async function getStaticPaths() {
  const myMicroCMSApiUrl = `https://${
    import.meta.env.MICROCMS_SERVICE_DOMAIN_PORTFOLIO
  }.microcms.io/api/v1/works`;
  const res = await fetch(myMicroCMSApiUrl, {
    headers: {
      "X-MICROCMS-API-KEY": import.meta.env.MICROCMS_API_KEY_PORTFOLIO,
    },
  });
  const getFetchData: Work = await res.json();

  return getFetchData.contents.map((contents: Contents) => ({
    params: {
      workId: contents.id,
    },
  }));
}

//記事の詳細情報を取得
const { workId } = Astro.params;

const myMicroCMSApiUrl = `https://${
  import.meta.env.MICROCMS_SERVICE_DOMAIN_PORTFOLIO
}.microcms.io/api/v1/works/${workId}`;
const res = await fetch(myMicroCMSApiUrl, {
  headers: {
    "X-MICROCMS-API-KEY": import.meta.env.MICROCMS_API_KEY_PORTFOLIO,
  },
});
const getFetchWorkDetail: Contents = await res.json();

// サイトのURLを取得
const site_url = "https://watataku-portfolio.vercel.app" + Astro.url.pathname;

const title = getFetchWorkDetail.title;
const comment = getFetchWorkDetail.comment;
const commentLarge = getFetchWorkDetail.comment_large;
const href = getFetchWorkDetail.href;
const useTech = getFetchWorkDetail.use_tech;
const imagePc = getFetchWorkDetail.image.url;
const widthLarge = getFetchWorkDetail.image.width;
const heightLarge = getFetchWorkDetail.image.height;

const imageSp = getFetchWorkDetail.image_sp.url;
const widthSmall = getFetchWorkDetail.image_sp.width;
const heightSmall = getFetchWorkDetail.image_sp.height;

const imageSp2 = getFetchWorkDetail.image_sp2.url;
const widthSmall2 = getFetchWorkDetail.image_sp2.width;
const heightSmall2 = getFetchWorkDetail.image_sp2.height;
---

<Layout
  title={`${title} | Watataku's ポートフォリオ`}
  description={comment}
  site_url={site_url}
  ogp={imagePc}
>
  <Speacer height={"80"} />
  <section class="detail">
    <div class="detail__inner">
      <h1 class="detail__inner__title">{title}</h1>
      <a href={href} target="_blank"
        ><img
          class="detail__inner__image"
          src={imagePc}
          width={widthLarge}
          height={heightLarge}
          alt={title}
        />
      </a>

      <Speacer height={"70"} />
      <div class="detail__inner__texts">
        <Speacer height={"60"} />
        <p class="detail__inner__texts__text">
          URL:
          <a href={href} target="_blank">{href}</a>
        </p>
        <p class="detail__inner__texts__text">
          使用技術:{useTech}
        </p>

        <div class="detail__inner__texts__text" set:html={commentLarge} />
      </div>

      <Speacer height={"60"} />
      <div class="detail__inner__thumbnail">
        <p class="detail__inner__thumbnail__item">
          <img
            class="detail__inner__thumbnail__item__image--sp"
            src={imageSp}
            width={widthSmall}
            height={heightSmall}
            alt={title}
          />
        </p>
        <p class="detail__inner__thumbnail__item">
          <img
            class="detail__inner__thumbnail__item__image--sp"
            src={imageSp2}
            width={widthSmall2}
            height={heightSmall2}
            alt={title}
          />
        </p>
      </div>
    </div>
    <Speacer height={"80"} />
    <Work limit={"6"} />
  </section>
  <Speacer height={"80"} />
</Layout>

<script>
  import { closeLoadingScreen, intersection } from "../../ts/function";

  const bodyElement = document.querySelector("body") as HTMLBodyElement;
  window.onload = () => {
    setTimeout(() => {
      closeLoadingScreen(".js-loader-bg");
      if (bodyElement != null) {
        bodyElement.classList.add("loaded");
      }
    }, 1500);
  };

  intersection(document.querySelectorAll(".detail__inner__texts__text"));
  intersection(document.querySelectorAll(".detail__inner__thumbnail__item"));
</script>

<style>
  .detail {
    background-color: var(--main-color);
  }

  .detail__inner {
    width: var(--base-width);
    margin: 0 auto;
  }

  .detail__inner__title {
    color: var(--accent-color);
    font-size: clamp(1.875rem, -0.313rem + 7.29vw, 4.5rem);
    padding: 0 0 clamp(30px, 5vw, 60px) 0;
  }

  /* 画像関係 */
  .detail__inner__image {
    border: solid 1px var(--accent-color);
  }

  .detail__inner__thumbnail {
    width: 100%;
    display: flex;
    justify-content: space-around;
    border-bottom: 2px solid var(--accent-color);
    padding-bottom: 80px;
  }

  .detail__inner__thumbnail__item {
    width: 30%;
    opacity: 0;
  }
  @media screen and (max-width: 1026px) {
    .detail__inner__thumbnail__item {
      width: 45%;
    }
  }

  .detail__inner__thumbnail__item.active:nth-child(1) {
    animation: animationName 0.5s ease 0.5s 1 forwards;
  }

  .detail__inner__thumbnail__item.active:nth-child(2) {
    animation: animationName 0.5s ease 0.7s 1 forwards;
  }

  .detail__inner__thumbnail__item__image--sp {
    border: solid 1px var(--accent-color);
  }

  /* テキスト関係 */
  .detail__inner__texts {
    color: var(--accent-color);
    border-top: 2px solid var(--accent-color);
  }

  .detail__inner__texts__text {
    margin-top: 20px;
    word-break: break-all;
    opacity: 0;
    transform: translate3d(0, 30px, 0);
  }
  @media screen and(max-width: 1026px) {
    .detail__inner__texts__text {
      transform: translate3d(0, 0, 0);
    }
  }

  .detail__inner__texts__text a {
    border-bottom: 1px var(--accent-color) solid;
  }

  .detail__inner__texts__text.active {
    animation: animationName 0.5s ease 0.5s 1 forwards;
  }

  .detail__inner__linker {
    font-size: clamp(1rem, 0.583rem + 1.39vw, 1.5rem);
    margin: 30px 0 0 0;
    text-align: right;
    opacity: 0;
    transform: translate3d(30px, 0, 0);
  }
  @media screen and(max-width: 1026px) {
    .detail__inner__linker {
      transform: translate3d(0, 0, 0);
    }
  }

  .detail__inner__linker.active {
    animation: animationName 0.5s ease 0.5s 1 forwards;
  }

  @keyframes animationName {
    100% {
      opacity: 1;
      transform: translate3d(0, 0, 0);
    }
  }
</style>
